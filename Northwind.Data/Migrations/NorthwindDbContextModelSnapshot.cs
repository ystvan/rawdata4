// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Northwind.Data;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Northwind.Data.Migrations
{
    [DbContext(typeof(NorthwindDbContext))]
    partial class NorthwindDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("Relational:Sequence:.OrderNumbers", "'OrderNumbers', '', '9', '1', '', '', 'Int32', 'False'");

            modelBuilder.Entity("Northwind.Shared.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("categoryid")
                        .HasColumnType("integer")
                        .HasDefaultValueSql("nextval('\"OrderNumbers\"')");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnName("categoryname")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("categories");
                });

            modelBuilder.Entity("Northwind.Shared.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnName("orderdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<double>("Freight")
                        .HasColumnName("freight")
                        .HasColumnType("double precision");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTime>("Required")
                        .HasColumnName("requireddate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ShipCity")
                        .HasColumnName("shipcity")
                        .HasColumnType("text");

                    b.Property<string>("ShipName")
                        .HasColumnName("shipname")
                        .HasColumnType("text");

                    b.Property<DateTime>("Shipped")
                        .HasColumnName("shippeddate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("orders");
                });

            modelBuilder.Entity("Northwind.Shared.OrderDetails", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnName("productid")
                        .HasColumnType("integer");

                    b.Property<int>("OrderId")
                        .HasColumnName("orderid")
                        .HasColumnType("integer");

                    b.Property<double>("Discount")
                        .HasColumnName("discount")
                        .HasColumnType("double precision");

                    b.Property<double>("Quantity")
                        .HasColumnName("quantity")
                        .HasColumnType("double precision");

                    b.Property<double>("UnitPrice")
                        .HasColumnName("unitprice")
                        .HasColumnType("double precision");

                    b.HasKey("ProductId", "OrderId");

                    b.HasIndex("OrderId");

                    b.ToTable("orderdetails");
                });

            modelBuilder.Entity("Northwind.Shared.Product", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("productid")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnName("productname")
                        .HasColumnType("text");

                    b.Property<string>("QuantityPerUnit")
                        .HasColumnName("quantityperunit")
                        .HasColumnType("text");

                    b.Property<double>("UnitInStock")
                        .HasColumnName("unitinstock")
                        .HasColumnType("double precision");

                    b.Property<double>("UnitPrice")
                        .HasColumnName("unitprice")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.ToTable("products");
                });

            modelBuilder.Entity("Northwind.Shared.OrderDetails", b =>
                {
                    b.HasOne("Northwind.Shared.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Northwind.Shared.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Northwind.Shared.Product", b =>
                {
                    b.HasOne("Northwind.Shared.Category", "Category")
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
